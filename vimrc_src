"##################################################################
" Script Name : Vimrc
"
" Description : vimrc config file
"
" Creation Date : 16-01-2021
" Last Modified :
"
" Created By : Nabendu Maiti
" Email : 1206581+nmaiti@users.noreply.github.com
"##################################################################
"------------------------------------------------------------------------------
"  Leader Key
"------------------------------------------------------------------------------
let mapleader=","       " leader is comma
set encoding=utf8
"set guifont=DejaVu\ Sans\ Mono\ 10
"""""set guifont=Hack\ 10
"set guifont=DroidSansMono\ Nerd\ Font\ 11
set pastetoggle=<F10>

if has("mac") || has("macunix")
    set guifont=Monaco:h12
    set backspace=indent,eol,start
endif

""""set guifont=Hack\ 10
" Init pathogen
call pathogen#infect()
call pathogen#helptags()

"FileType support
set filetype=on
filetype plugin indent on

autocmd FileType javascript,html,css,php,yaml set ai
autocmd FileType javascript,html,css,php,yaml set sw=2
autocmd FileType javascript,html,css,php,yaml set ts=2
autocmd FileType javascript,html,css,php,yaml set sts=2
autocmd FileType javascript,css,php set textwidth=0
autocmd FileType html,htm,xml,tpl,yaml set textwidth=0
autocmd FileType yaml setlocal expandtab

"------------------------------------------------------------------------------
"  Look and feel
"------------------------------------------------------------------------------
set t_Co=1024
if has('gui_running')
    " close The toolbar when use gVim
    " close the scrollbar when use gVim
    set lines=63
    set columns=180
    set guioptions-=T
    set guioptions-=l
    set guioptions-=r
    set guioptions-=b

    " Let tablebel show only name of file, not the full path.
    set guitablabel=%t
    " paste from system clipboard
    set clipboard=unnamed
    vnoremap y "+y
    "vnoremap y ygv"+y
    vnoremap Y "+Y
    nnoremap p "+p
    nnoremap P "+P
    nnoremap yy yy"+yy
endif

if &term =~ "xterm"
    " 256 colors
    let &t_Co = 256
    " restore screen after quitting
    let &t_ti = "\<Esc>7\<Esc>[r\<Esc>[?47h"
    let &t_te = "\<Esc>[?47l\<Esc>8"
    if has("terminfo")
        let &t_Sf = "\<Esc>[3%p1%dm"
        let &t_Sb = "\<Esc>[4%p1%dm"
    else
        let &t_Sf = "\<Esc>[3%dm"
        let &t_Sb = "\<Esc>[4%dm"
    endif
endif

filetype plugin indent off

set ttymouse=xterm2
set mouse=a
"------------------------------------------------------------------------------
" vim autosave workspace
let g:workspace_autosave_always = 1
nnoremap <leader>ss :ToggleWorkspace<CR>
let g:workspace_session_name = '.session.vim'
let g:workspace_autosave_ignore = ['gitcommit', 'qf', 'nerdtree', 'tagbar']"
let g:workspace_autosave = 1
set sessionoptions-=blank

"------------------------------------------------------------------------------
"---  Force termial 256 color
"------------------------------------------------------------------------------
set t_Co=256
 set term=xterm-256color
"colorscheme github "solarized delek
if has('gui_running')
    set background=light
else
    set background=dark
endif
colorscheme jay "srcery
"colorscheme solarized "Dark delek
"let g:solarized_termcolors = 256
"let g:solarized_termtrans = 1
"let g:solarized_visibility = "high"
"let g:solarized_contrast = "high"

" Automatic reloading of .vimrc
"autocmd! bufwritepost .vimrc source %
"------------------------------------------------------------------------------
" syntax, highlighting and spelling
"------------------------------------------------------------------------------
"---------------  Powerline settings ------------------------------------------
let g:Powerline_symbols = 'fancy'
set encoding=utf-8
set t_Co=256
set term=xterm-256color
set termencoding=utf-8

"----- C syntax highlightng (cppextra syntax highligting) - --------------------
let g:cpp_attributes_highlight = 1
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_posix_standard = 1
let g:cpp_experimental_template_highlight = 1

"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

"---------   Open Last Edit Position  -----------------------------------------
if has("autocmd")
    " When editing a file, always jump to the last cursor position
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line ("'\"") <= line("$") |
                \   exe "normal g'\"" |
                \ endif
endif

"------------------------------------------------------------------------------
"  tabs and indenting
"  Real programmers don't use TABs but spaces
"------------------------------------------------------------------------------
set tabstop=4     "  tab = 8 spaces
set shiftwidth=4  "  autoindent indents 2 spaces
set smarttab      "  <TAB> in front of line inserts 'shiftwidth' blanks
set softtabstop=4
"set noexpandtab
set expandtab
set shiftround    "  Indent to nearest tabstop
set autoindent    "  Carries over previous indent to the next line
set cindent       "  Carries over previous indent to the next line

set cursorline
"------------------------------------------------------------------------------
"  displaying text
"------------------------------------------------------------------------------
syntax on             "  Enable syntax
set scrolloff=3       "  number of screen lines to show around the cursor
set linebreak         "  For lines longer than the window, wrap intelligently.
"  This doesn't insert hard line breaks.
set showbreak=?\ \    "  string to put before wrapped screen lines
set sidescrolloff=2   "  min # of columns to keep left/right of cursor
set display+=lastline "  show last line, even if it doesn't fit in the window
set cmdheight=3       "  # of lines for the command window
"  cmdheight=2 helps avoid 'Press ENTER...' prompts

set number            "  show line numbers
"------------- color column at 80th letter ------------------------------------
if exists('+colorcolumn')
    set colorcolumn=80    " display a line in column 80 to show you
    " where to line break.
    highlight ColorColumn ctermbg=darkred ctermfg=lightblue
    highlight Search ctermbg=darkgrey ctermfg=lightgreen
endif


"NBMhighlight Search ctermbg=darkgrey ctermfg=lightgreen
"------------------------------------------------------------------------------
" messages and info
"------------------------------------------------------------------------------

set showcmd "  In the status bar, show incomplete commands as they are typed
set ruler   "  Always display the current cursor position in the Status Bar
set confirm "  Ask to save buffer instead of failing when executing
"  commands which close buffers

"------------------------------------------------------------------------------
"  editing text
"------------------------------------------------------------------------------
set backspace=indent,eol,start  "backspace over everything
if v:version > 703 || v:version == 703 && has("patch541")
    set formatoptions+=j     "delete comment char on second line when
    "  joining two commented lines
endif
set showmatch                "  when inserting a bracket, briefly jump to its
"  match
set nojoinspaces             "  Use only one space after '.' when joining
"  lines, instead of two

set nrformats-=octal         "  don't treat numbers with leading zeros as octal
"  when incrementing / decrementing


"------------------------------------------------------------------------------
"  diff mode
" -----------------------------------------------------------------------------
set diffopt+=vertical       " start diff mode with vertical splits by default

"------------------------------------------------------------------------------
"  reading and writing files
"------------------------------------------------------------------------------
set autoread                " Automatically re-read files changed outside
" of Vim

"------------------------------------------------------------------------------
" command line editing
set history=700
set undolevels=700

"------------------------------------------------------------------------------
" Command mode auto completion

set wildmode=list:longest,full

" File tab completion ignores these file patterns
set wildignore+=*.exe,*.swp,.DS_Store
set wildmenu
" Add guard around 'wildignorecase' to prevent terminal vim error
if exists('&wildignorecase')
    set wildignorecase
endif

" Copy to system clipboard
func! GetSelectedText()
    normal gv"xy
    let result = getreg("x")
    return result
endfunc
" copy line ,cv ; cut line ,ct ; relative path ,cr ; absolute path ,ca
if !has("clipboard") && executable("clip.exe") " For wsl
    map ,cp :call system('clip.exe', GetSelectedText())<CR>
    map ,ct :call system('clip.exe', GetSelectedText())<CR>gvx
    map ,cr :call system('clip.exe', expand("%"))<CR>
    map ,ca :call system('clip.exe', expand("%:p"))<CR>
else
    map ,cp :let @* =GetSelectedText()<CR>
    map ,ct :let @* =GetSelectedText()<CR>
    map ,cr :let @* =expand("%")<CR>
    map ,ca :let @* =expand("%:p")<CR>
endif

"------------------------------------------------------------------------------
" Window Management
"------------------------------------------------------------------------------
" Use left, right, up, down arrow to modify windows size.
"nmap <leader><LEFT> :<C-W>< <CR>
"nmap <leader><RIGHT> <C-W>>
"nmap <leader><UP> <C-W>+
"nmap <leader><DOWN> <C-W>-
noremap <silent> <C-S-LEFT> :vertical resize +1<CR>
noremap <silent> <C-S-RIGHT> :vertical resize -1<CR>
noremap <silent> <C-S-UP> :res +1 <CR>
noremap <silent> <C-S-DOWN> :res -1<CR>


" bind Ctrl+<movement> keys to move around the windows,
" instead of using Ctrl+w + <movement>
map <tab><tab> <C-w>w
map <tab><LEFT> <C-w>h
map <tab><RIGHT> <C-w>l
map <tab><UP> <C-w>k
map <tab><DOWN> <C-w>j
map <tab><DOWN> <C-w>j
" for bottom-right and top-left movement
map <tab>> <C-w>b
map <tab>< <C-w>t
"map <c-j> <c-w>j
"map <c-k> <c-w>k
"map <c-l> <c-w>l
"map <c-h> <c-w>h
"
" easier moving between tabs
set hidden
" switch  between buffer move /also can be used by CtrlP
nmap <leader>bn :bnext<CR>
nmap <leader>bp :bprev<CR>
vmap <leader>bn :bnext<CR>
vmap <leader>bp :bprev<CR>
"imap <C-t> <Esc>:tabnew<CR>
"map <leader>n <esc>:tabprevious<CR>
"map <leader>m <esc>:tabnext<CR>
"map <leader>w <esc>:tabclose<CR>

"------------------------------------------------------------------------------
" tab control mapping
"------------------------------------------------------------------------------
map <C-Left> <Esc>:tabprev<CR>
map <C-Right> <Esc>:tabnext<CR>

map <leader>tn <Esc>:tabnew<CR>
"map <C-n> <Esc>:tabnew<CR>
"same as window close
"map <C-w>c <Esc>:tabclose<CR>


" easier moving of code blocks
" Try to go into visual mode (v), thenselect several lines of code here and
" then press ``>`` several times.
vnoremap < <gv  " better indentation
vnoremap > >gv  " better indentation

"----------------- Save Or Quit -----------------------------------------------
" Quicksave command
noremap <Leader>s :update<CR>
vnoremap <Leader>s <C-C>:update<CR>
inoremap <Leader>s <C-O>:update<CR>

" Quick quit command
noremap <Leader>x :quit<CR>  " Quit current window
noremap <Leader>X :qa!<CR>   " Quit all windows


" Remove unwanted spaces
map <leader>rs :%s/\s\+$//<CR>

" Removes highlight of your last search
" ``<C>`` stands for ``CTRL`` and therefore ``<C-h>`` stands for ``CTRL+h``
noremap <C-h> :nohl<CR>
vnoremap <C-h> :nohl<CR>
inoremap <C-h> :nohl<CR>

map <leader>n <esc>:cn<CR>
map <leader>p <esc>:cp<CR>

" map sort function to a key
"" vnoremap <Leader>s :sort<CR>

" Make search case insensitive
set nostartofline     " keep cursor in same column for long-range motion cmds
set incsearch         " Highlight pattern matches as you type
set ignorecase        " ignore case when using a search pattern
set smartcase         " override 'ignorecase' when have upper case character
set hlsearch          " set search high light

" Disable stupid backup and swap files - they trigger too many events
" for file system watchers
set nobackup
set nowritebackup
set noswapfile

" some shortcut for myself
" using `less` to open current file, since less is easier to copy from.
nmap <leader>ls <esc>:!less %<CR>

set laststatus=2

"------------------------------------------------------------------------------
" vim-clang-format.vim
"------------------------------------------------------------------------------
let g:clang_format#style_options = {
            \ "AccessModifierOffset" : -4,
            \ "AllowShortIfStatementsOnASingleLine" : "true",
            \ "AlwaysBreakTemplateDeclarations" : "true",
            \ "Standard" : "C++11",
            \ "BreakBeforeBraces" : "Stroustrup"}

" map to <Leader>cf in C++ code
autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
" Use .clang-format file if available
let g:clang_format#detect_style_file =  1
"-- uncomment below for c autoformat
"autocmd FileType c ClangFormatAutoEnable

"=============================================================================
" Window movement
"------------------------------------------------------------------------------
" CtrlP
"------------------------------------------------------------------------------
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_max_height = 30
set wildignore+=*.pyc
set wildignore+=*_build/*
set wildignore+=*.venv/*
set wildignore+=*/coverage/*
set wildignore+=*.testrepository/*
set wildignore+=*.git/*
set wildignore+=*.ropeproject/*
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = 'csope.out, tags'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
let g:ctrlp_working_path_mode = 2

" set default ctrlp to ctrlpMixed
" map <c-p> at last to override CCtree mapping
map <c-p> :CtrlPMixed<CR>
map <c-b> :CtrlPBuffer<CR>

"------------------------------------------------------------------------------
" Ack.vim  --  use ag(aka silverserver if availble) else ack cmd
"------------------------------------------------------------------------------
if executable('ag')
    "use silversearcher if available
    let g:ackprg = 'ag --vimgrep'
endif
cnoreabbrev Ack Ack!
nnoremap <Leader>ac :Ack!<Space>
" Ack word under the cursor
noremap <Leader>aw :Ack! <C-R>=expand("<cword>")<CR><CR>
noremap <Leader>af :AckFile <space>
"------------------------------------------------------------------------------
" Git Gutter
"------------------------------------------------------------------------------
let g:gitgutter_max_signs=-1 " git gutter max size

"------------------------------------------------------------------------------
" Tagbar plugin
" -----------------------------------------------------------------------------
let g:tagbar_sort = 0
autocmd FileType python,c,cpp TagbarOpen " Tagbar auto open
map <leader>tb :TagbarToggle<cr>
vmap <leader>tb <esc>:TagbarToggle<cr>
imap <leader>tb <esc>:TagbarToggle<cr>

"------------------------------------------------------------------------------
" NerdTree plugin
"------------------------------------------------------------------------------
let Tlist_Use_Right_Window = 1
let NERDTreeQuitOnOpen = 0
let NERDTreeIgnore=['.pyc$[[file]]','.gitignore$[[dir]]']
let g:nerdtree_tabs_open_on_gui_startup = 1
map <F5> :NERDTreeToggle<cr>
vmap <F5> <esc>:NERDTreeToggle<cr>
imap <F5> <esc>:NERDTreeToggle<cr>
map <leader>nt :NERDTreeToggle<cr>
vmap <leader>nt <esc>:NERDTreeToggle<cr>
imap <leader>nt <esc>:NERDTreeToggle<cr>

autocmd vimenter * if !argc() | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

"let g:NERDTreeGitStatusUseNerdFonts = 1
" Uncomment following to use auto refresh/else use 'R' command while focus on
" NERDTree window
" autocmd BufWritePost * NERDTreeFocus | execute 'normal R' | wincmd p

"------------------------------------------------------------------------------
" CCTree
"------------------------------------------------------------------------------
let g:CCTreeKeyHilightTree = ''
let g:CCTreeKeyToggleWindow = '<C-c>w'
let g:CCTreeKeyTraceForwardTree = '<C-c>>'
let g:CCTreeKeyTraceReverseTree = '<C-c><'
let g:CCTreeKeyDepthPlus = '<C-c>]'
let g:CCTreeKeyDepthMinus = '<C-c>['
let g:CCTreeMinVisibleDepth = 2
let g:CCTreeDisplayMode = 2
"map <leader>cc <esc>:CCTreeLoadDB cscope.out<cr>
map <leader>cc <esc>:call RefreshCCTree() <CR>
" -----------------------------------------------------------------------------
"  Cscope cctree ctags update
" -----------------------------------------------------------------------------
map <F6> :!cscope -bR<CR>:cs reset<CR>:!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q . <CR> <CR>
"map <F7> :call RefreshCCTree() <CR>

"------------------------------------------------------------------------------
" Easy Motion
"------------------------------------------------------------------------------
map <leader>a <leader><leader>w

"------------------------------------------------------------------------------
" python--mode
"`https://github.com/klen/python-mode
"------------------------------------------------------------------------------
au FileType python map <Leader>g :call pymode#rope#goto_definition()<CR>
let g:pymode = 1
let g:pymode_run = 0
let g:pymode_folding=0
let g:pymode_lint_checker="pyflakes,pep8"
let g:pymode_lint_ignore="N4,E12,E711,E712,E721,E502,E501"

let g:pymode_rope_enable_shortcuts=0
let pymode_rope_vim_completion=0
let pymode_rope_extended_complete=0
let g:pymode_rope_regenerate_on_write = 0
"let g:pymode_rope_enable_autoimport=0
let g:pymode_rope_goto_def_newwin="new"
let g:pymode_rope_guess_project = 1
let g:pymode_rope = 1
let g:pymode_rope_completion = 0

"------------------------------------------------------------------------------
" vim-go
"------------------------------------------------------------------------------
au FileType go nmap <Leader>g <Plug>(go-def)
au FileType go nmap <Leader>gs <Plug>(go-def-split)
au FileType go nmap <Leader>gv <Plug>(go-def-vertical)
au FileType go nmap <Leader>gt <Plug>(go-def-tab)
let g:go_version_warning = 0
let g:go_fmt_autosave = 0
"------------------------------------------------------------------------------
" vim-markdown
"------------------------------------------------------------------------------
let g:vim_markdown_folding_disabled = 1
"------------------------------------------------------------------------------
" indentline
"------------------------------------------------------------------------------
let g:indentLine_fileTypeExclude = ['html', 'htm']
let g:indentLine_color_term = 239
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
"let g:indentLine_bgcolor_term = 12
let g:indentLine_bgcolor_gui = '#FF5F00'
let g:indentLine_color_tty_light = 4 " (default: 4)
let g:indentLine_color_dark = 2 " (default: 2)

"------------------------------------------------------------------------------
" Folding
"------------------------------------------------------------------------------
set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max
" space open/closes folds
nnoremap <space> za
set foldmethod=indent   " fold based on indent level

" -----------------------------------------------------------------------------
" Session Save mapping
" -----------------------------------------------------------------------------
" save session
nnoremap <leader>s :mksession<CR>


" default is ~/.vim/sessions.
"let g:vsession_path = '/to/your/path'

" if installed fzf.vim, you can use fzf's interface to load and delete session.
" default is false.
let g:vsession_use_fzf = 1

"------------------------------------------------------------------------------
" setlocal spell spelllang=en_us
" Set spell checking on vim git commit
"------------------------------------------------------------------------------
autocmd BufNewFile,BufRead COMMIT_EDITMSG setlocal spell

"------------------------------------------------------------------------------
" vim-autoformat
map <leader>fa :Autoformat<CR>

"------------------------------------------------------------------------------
" linux coding style formating
let g:linuxsty_patterns = [ "/usr/src/", "/linux" ]
nnoremap <silent> <leader>lx :LinuxCodingStyle<cr>

"------------------------------------------------------------------------------
" Ominicppcomplete
"------------------------------------------------------------------------------
filetype plugin indent on
set omnifunc=syntaxcomplete#Complete
"set completeopt+=longest    " better omni-complete menu
let OmniCpp_DisplayMode         = 1
let OmniCpp_ShowScopeInAbbr     = 1 "do not show namespace in pop-up
let OmniCpp_ShowPrototypeInAbbr = 1 "show prototype in pop-up
let OmniCpp_ShowAccess          = 1 "show access in pop-up
let OmniCpp_SelectFirstItem     = 2 "select first item in pop-up
set completeopt=menuone,menu
set completeopt+=preview
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

"------------------------------------------------------------------------------
"  CCTree database handling functions
"------------------------------------------------------------------------------
function! RefreshCCTree()
    CCTreeUnLoadDB
    !rm -f cctree.lst
    call LoadCCTree()
endfunc
function! LoadCCTree()
    if filereadable('cctree.lst')
        CCTreeLoadXRefDBFromDisk cctree.lst
    else
        if filereadable('cscope.out')
            CCTreeLoadDB cscope.out
            CCTreeSaveXRefDB cctree.lst
        endif
    endif
endfunc

" C code header
autocmd bufnewfile *.c so ~/.vim/headers/c_header.template
autocmd bufnewfile *.c exe "1," . 10 . "g/File Name :.*/s//File Name : " .expand("%")
autocmd bufnewfile *.c exe "1," . 10 . "g/Creation Date :.*/s//Creation Date : " .strftime("%d-%m-%Y")
autocmd Bufwritepre,filewritepre *.c execute "normal ma"
autocmd Bufwritepre,filewritepre *.c exe "1," . 10 . "g/Last Modified :.*/s/Last Modified :.*/Last Modified : " .strftime("%c")
autocmd bufwritepost,filewritepost *.c execute "normal `a"
" Sh code header
autocmd bufnewfile *.sh so ~/.vim/headers/sh_header.template
autocmd bufnewfile *.sh exe "1," . 10 . "g/Script Name :.*/s//Script Name : " .expand("%")
autocmd bufnewfile *.sh exe "1," . 10 . "g/Creation Date :.*/s//Creation Date : " .strftime("%d-%m-%Y")
autocmd Bufwritepre,filewritepre *.sh execute "normal ma"
autocmd Bufwritepre,filewritepre *.sh exe "1," . 10 . "g/Last Modified :.*/s/Last Modified :.*/Last Modified : " .strftime("%c")
autocmd bufwritepost,filewritepost *.sh execute "normal `a"
